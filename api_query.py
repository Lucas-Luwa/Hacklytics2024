import requests
from startEndPrices import getOpenClosePrice
from getDataset import options_history

def get_full_dataset():
  endpoint = "https://www.dolthub.com/api/v1alpha1/post-no-preference/options/master"
  query = "SELECT * FROM `option_chain` WHERE `date` >= '2023-01-01' AND `expiration` < '2024-02-10' ORDER BY `date` ASC"
  res = requests.get(endpoint, params={'q': query})
  data = res.json()['rows']

  # {'date': '2019-02-23', 'act_symbol': 'SBAC', 'expiration': '2019-04-18', 'strike': '200.00', 
  # 'call_put': 'Call', 'bid': '0.20', 'ask': '0.65', 'vol': '0.1687', 'delta': '0.0940', 
  # 'gamma': '0.0142', 'theta': '-0.0196', 'vega': '0.1177', 'rho': '0.0246'}

  dataset = []

  for row in data:
    try:
      info = getOpenClosePrice(row['act_symbol'], row['date'], row['expiration'])
      entry = row
      entry['open_price'] = info[0]
      entry['close_price'] = info[1]
      entry['mark'] = (float(row['bid']) + float(row['ask'])) / 2
      history = options_history(row['act_symbol'], "60m", row['date'], row['expiration'])
      entry['history'] = history["Open"].tolist()
      dataset.append(entry)
    except:
      print("exception")

  return dataset

# {'date': '2023-01-02', 'act_symbol': 'ABG', 'expiration': '2023-01-20', 'strike': '210.00', 
#  'call_put': 'Put', 'bid': '28.70', 'ask': '32.70', 'vol': '0.3293', 'delta': '-0.9972', 
#  'gamma': '0.0033', 'theta': '0.0000', 'vega': '0.0052', 'rho': '0.0000', 
#  'open_price': 180.06, 'close_price': 184.04, 'mark': 30.700000000000003, 
#  'history': [180.05999755859375, 178.44000244140625, 177.50999450683594, 176.35000610351562, 176.99000549316406, 174.97999572753906, 175.2100067138672, 176.7100067138672, 179.65989685058594, 179.6699981689453, 179.56500244140625, 180.14999389648438, 179.25, 179.02000427246094, 177.9600067138672, 179.27999877929688, 177.99000549316406, 178.82000732421875, 180.17999267578125, 180.7100067138672, 179.99000549316406, 182.85000610351562, 182.8000030517578, 184.8000030517578, 182.58999633789062, 183.50999450683594, 183.4600067138672, 183.5800018310547, 184.72999572753906, 184.41000366210938, 185.9600067138672, 187.2100067138672, 187.13999938964844, 185.92999267578125, 185.47000122070312, 183.99000549316406, 185.35000610351562, 186.1999969482422, 186.75, 186.9499969482422, 188.3249969482422, 187.94000244140625, 189.4199981689453, 194.02000427246094, 191.24000549316406, 190.75, 191.4199981689453, 190.63499450683594, 190.8300018310547, 193.5800018310547, 189.39999389648438, 190.58999633789062, 192.68499755859375, 192.35499572753906, 193.6750030517578, 193.89999389648438, 189.6999969482422, 187.50999450683594, 190.86500549316406, 190.2100067138672, 190.6699981689453, 190.75999450683594, 189.22900390625, 185.35000610351562, 186.11000061035156, 186.40499877929688, 186.5050048828125, 186.31500244140625, 185.4550018310547, 185.2899932861328, 186.86000061035156, 190.5800018310547, 187.0, 185.69000244140625, 186.4199981689453, 185.2100067138672, 185.1699981689453, 182.88999938964844, 180.31500244140625, 181.89999389648438, 182.50999450683594, 182.7895050048828, 183.11749267578125, 183.38999938964844]
#  }
